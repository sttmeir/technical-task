version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: sto_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d sto_db" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

    healthcheck:
      test: [ "CMD", "zkServer.sh", "status" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT"
      KAFKA_LISTENERS: "PLAINTEXT://:9092"

    healthcheck:
      test: |
        bash -c '\
        kafka-topics.sh --bootstrap-server kafka:9092 --list 2>/dev/null || \
        nc -zv kafka 9092 || \
        exit 1'
      interval: 10s
      timeout: 20s
      retries: 15
      start_period: 40s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sto-app
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka:9092"

volumes:
  postgres_data: